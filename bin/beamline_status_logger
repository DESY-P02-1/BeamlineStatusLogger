#!/usr/bin/env python3
import signal
import argparse
import configparser
import glob
import os
import threading
import BeamlineStatusLogger as bsl

parser = argparse.ArgumentParser(
    description="Excute beamline status logger instances defined in logger "
                "configuration files.")
parser.add_argument("config_path", type=str,
                    help='Path to config file or directory')


module_map = {"source": bsl.sources, "processor": bsl.processors,
              "sink": bsl.sinks, "timer": bsl.timer}


class ConfigError(Exception):
    pass


def get_typed_value(section, key):
    for converter in [section.getboolean, section.getint, section.getfloat]:
        try:
            value = converter(key)
        except ValueError:
            pass
        else:
            return value
    return section[key]


def config_to_dict(config):
    return {sec: {key: get_typed_value(config[sec], key)
                  for key in config.options(sec)}
            for sec in config.sections()}


def get_base_path(derived_path, section):
    base_path = base_path = next(iter(section.keys()))
    if not os.path.isabs(base_path):
        base_path = os.path.join(os.path.dirname(derived_path), base_path)
    if not os.path.exists(base_path):
        raise FileNotFoundError("File not found: " + base_path)
    return base_path


def _parse_config_files(path):
    cp = configparser.ConfigParser(allow_no_value=True)
    cp.read(path)
    if "based on" in cp:
        base_path = get_base_path(path, cp["based on"])
        cp.remove_section("based on")
        cp_base = _parse_config_files(base_path)
        cp_base.read_dict(cp)
        return cp_base
    else:
        return cp


def parse_config_file(path):
    if not os.path.exists(path):
        raise FileNotFoundError("File not found: " + path)
    config = configparser.ConfigParser(
        allow_no_value=True,
        interpolation=configparser.ExtendedInterpolation())
    config.read_dict(_parse_config_files(path))
    return config_to_dict(config)


def create_Logger(dictionary):
    pipeline = {}
    if "metadata" in dictionary:
        metadata = dictionary.pop("metadata")
        dictionary["source"]["metadata"] = metadata

    for module, instance in dictionary.items():
        if "class" not in instance:
            raise ConfigError("Section [" + module + "] must contain a class "
                              "option")
        type = instance.pop("class")
        # TODO: use proper introspection
        pipeline[module] = module_map[module].__dict__[type](**instance)

    for section in ["source", "sink", "timer"]:
        if section not in pipeline:
            raise ConfigError("Config files must contain a [" + section
                              + "] section")
    return bsl.Logger(
        source=pipeline["source"],
        processors=pipeline.get("processor", []),
        sink=pipeline["sink"],
        timer=pipeline["timer"])


def main():
    args = parser.parse_args()
    config_path = args.config_path
    if os.path.isfile(config_path):
        config = parse_config_file(config_path)
        loggers = [create_Logger(config)]
    else:
        loggers = []
        for file in glob.iglob(config_path + "/*.logger"):
            config = parse_config_file(file)
            loggers.append(create_Logger(config))

    def signalhandler(signum, frame):
        for logger in loggers:
            logger.abort()

    signal.signal(signal.SIGINT, signalhandler)
    signal.signal(signal.SIGTERM, signalhandler)

    threads = []
    for logger in loggers:
        t = threading.Thread(target=logger.run)
        t.start()
        threads.append(t)


if __name__ == "__main__":
    main()
